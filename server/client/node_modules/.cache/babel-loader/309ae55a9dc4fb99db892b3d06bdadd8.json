{"ast":null,"code":"import _regeneratorRuntime from\"/var/www/redux-mern-landing/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/var/www/redux-mern-landing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/var/www/redux-mern-landing/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/var/www/redux-mern-landing/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n\\tfont-family: Tahoma, Verdana, Segoe, sans-serif;\\n\\tfont-size: 16px;\\n\\tfont-style: normal;\\n\\tfont-variant: normal;\\n\\tfont-weight: 700;\\n\\tline-height: 26.4px;\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from\"react\";import{Segment,Button,Form}from\"semantic-ui-react\";import{useWindowSize}from\"../../hooks/useWindowSize\";import styled from\"styled-components\";import{useCookies}from\"react-cookie\";import{useDispatch,useSelector}from\"react-redux\";import{getMOTD,fetchMOTD,setLoadingStatusEditBox}from\"../../redux/actions/messageActions\";var StyledTextArea=styled(Form.TextArea)(_templateObject());export default function EditBox(props){var _useWindowSize=useWindowSize(),height=_useWindowSize.height;var rawBBCode=useSelector(function(state){return state.messageReducer.motd;});var isLoading=useSelector(function(state){return state.messageReducer.loadingStatusEditBox;});var _useCookies=useCookies([\"discord_token\"]),_useCookies2=_slicedToArray(_useCookies,1),cookies=_useCookies2[0];var dispatch=useDispatch();var onChange=function onChange(e,_ref){var value=_ref.value;e.preventDefault();dispatch(getMOTD(value));};var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var body;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();dispatch(setLoadingStatusEditBox(true));body={data:rawBBCode};_context.next=5;return fetch(\"/edit\",{method:\"POST\",body:JSON.stringify(body),headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \".concat(cookies.discord_token)}});case 5:_context.next=7;return dispatch(fetchMOTD());case 7:dispatch(setLoadingStatusEditBox(false));case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return React.createElement(Segment,null,React.createElement(Form,null,React.createElement(StyledTextArea,{type:\"text\",defaultValue:rawBBCode,onChange:onChange,style:{height:\"\".concat(height-100,\"px\")}})),React.createElement(Button,{onClick:handleClick,color:\"blue\",style:{marginTop:\"3px\"},loading:isLoading},\"Save\"));}","map":{"version":3,"sources":["/var/www/redux-mern-landing/server/client/src/components/common/EditBox.jsx"],"names":["React","Segment","Button","Form","useWindowSize","styled","useCookies","useDispatch","useSelector","getMOTD","fetchMOTD","setLoadingStatusEditBox","StyledTextArea","TextArea","EditBox","props","height","rawBBCode","state","messageReducer","motd","isLoading","loadingStatusEditBox","cookies","dispatch","onChange","e","value","preventDefault","handleClick","body","data","fetch","method","JSON","stringify","headers","Authorization","discord_token","marginTop"],"mappings":"mvBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,CAAkBC,MAAlB,CAA0BC,IAA1B,KAAsC,mBAAtC,CACA,OAASC,aAAT,KAA8B,2BAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACCC,OADD,CAECC,SAFD,CAGCC,uBAHD,KAIO,oCAJP,CAMA,GAAMC,CAAAA,cAAc,CAAGP,MAAM,CAACF,IAAI,CAACU,QAAN,CAAT,mBAApB,CASA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,oBACnBX,aAAa,EADM,CAC9BY,MAD8B,gBAC9BA,MAD8B,CAEtC,GAAMC,CAAAA,SAAS,CAAGT,WAAW,CAAC,SAAAU,KAAK,QAAIA,CAAAA,KAAK,CAACC,cAAN,CAAqBC,IAAzB,EAAN,CAA7B,CACA,GAAMC,CAAAA,SAAS,CAAGb,WAAW,CAC5B,SAAAU,KAAK,QAAIA,CAAAA,KAAK,CAACC,cAAN,CAAqBG,oBAAzB,EADuB,CAA7B,CAHsC,gBAMpBhB,UAAU,CAAC,CAAC,eAAD,CAAD,CANU,4CAM/BiB,OAN+B,iBAOtC,GAAMC,CAAAA,QAAQ,CAAGjB,WAAW,EAA5B,CACA,GAAMkB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,MAAkB,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CAClCD,CAAC,CAACE,cAAF,GACAJ,QAAQ,CAACf,OAAO,CAACkB,KAAD,CAAR,CAAR,CACA,CAHD,CAKA,GAAME,CAAAA,WAAW,2FAAG,iBAAMH,CAAN,2HACnBA,CAAC,CAACE,cAAF,GACAJ,QAAQ,CAACb,uBAAuB,CAAC,IAAD,CAAxB,CAAR,CACMmB,IAHa,CAGN,CACZC,IAAI,CAAEd,SADM,CAHM,uBAMbe,CAAAA,KAAK,CAAC,OAAD,CAAU,CACpBC,MAAM,CAAE,MADY,CAEpBH,IAAI,CAAEI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAFc,CAGpBM,OAAO,CAAE,CACR,eAAgB,kBADR,CAERC,aAAa,kBAAYd,OAAO,CAACe,aAApB,CAFL,CAHW,CAAV,CANQ,8BAcbd,CAAAA,QAAQ,CAACd,SAAS,EAAV,CAdK,QAenBc,QAAQ,CAACb,uBAAuB,CAAC,KAAD,CAAxB,CAAR,CAfmB,sDAAH,kBAAXkB,CAAAA,WAAW,6CAAjB,CAkBA,MACC,qBAAC,OAAD,MACC,oBAAC,IAAD,MACC,oBAAC,cAAD,EACC,IAAI,CAAC,MADN,CAEC,YAAY,CAAEZ,SAFf,CAGC,QAAQ,CAAEQ,QAHX,CAIC,KAAK,CAAE,CAAET,MAAM,WAAKA,MAAM,CAAG,GAAd,MAAR,CAJR,EADD,CADD,CASC,oBAAC,MAAD,EACC,OAAO,CAAEa,WADV,CAEC,KAAK,CAAC,MAFP,CAGC,KAAK,CAAE,CAAEU,SAAS,CAAE,KAAb,CAHR,CAIC,OAAO,CAAElB,SAJV,SATD,CADD,CAoBA","sourcesContent":["import React from \"react\"\nimport { Segment, Button, Form } from \"semantic-ui-react\"\nimport { useWindowSize } from \"../../hooks/useWindowSize\"\nimport styled from \"styled-components\"\nimport { useCookies } from \"react-cookie\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n\tgetMOTD,\n\tfetchMOTD,\n\tsetLoadingStatusEditBox,\n} from \"../../redux/actions/messageActions\"\n\nconst StyledTextArea = styled(Form.TextArea)`\n\tfont-family: Tahoma, Verdana, Segoe, sans-serif;\n\tfont-size: 16px;\n\tfont-style: normal;\n\tfont-variant: normal;\n\tfont-weight: 700;\n\tline-height: 26.4px;\n`\n\nexport default function EditBox(props) {\n\tconst { height } = useWindowSize()\n\tconst rawBBCode = useSelector(state => state.messageReducer.motd)\n\tconst isLoading = useSelector(\n\t\tstate => state.messageReducer.loadingStatusEditBox\n\t)\n\tconst [cookies] = useCookies([\"discord_token\"])\n\tconst dispatch = useDispatch()\n\tconst onChange = (e, { value }) => {\n\t\te.preventDefault()\n\t\tdispatch(getMOTD(value))\n\t}\n\n\tconst handleClick = async e => {\n\t\te.preventDefault()\n\t\tdispatch(setLoadingStatusEditBox(true))\n\t\tconst body = {\n\t\t\tdata: rawBBCode\n\t\t}\n\t\tawait fetch(\"/edit\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(body),\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Bearer ${cookies.discord_token}`,\n\t\t\t},\n\t\t})\n\t\tawait dispatch(fetchMOTD())\n\t\tdispatch(setLoadingStatusEditBox(false))\n\t}\n\n\treturn (\n\t\t<Segment>\n\t\t\t<Form>\n\t\t\t\t<StyledTextArea\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tdefaultValue={rawBBCode}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tstyle={{ height: `${height - 100}px` }}\n\t\t\t\t/>\n\t\t\t</Form>\n\t\t\t<Button\n\t\t\t\tonClick={handleClick}\n\t\t\t\tcolor=\"blue\"\n\t\t\t\tstyle={{ marginTop: \"3px\" }}\n\t\t\t\tloading={isLoading}\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</Button>\n\t\t</Segment>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}
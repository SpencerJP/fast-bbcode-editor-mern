{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}(); // https://github.com/vishnevskiy/bbcodejs/blob/master/src/coffee/parser.coffee\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _constants = require('./constants');\n\nvar _tags = require('./tags');\n\nvar _tags2 = _interopRequireDefault(_tags);\n\nvar _tag = require('./tag');\n\nvar _tag2 = _interopRequireDefault(_tag);\n\nvar _renderer = require('./renderer');\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Parser = function () {\n  function Parser() {\n    var _this = this;\n\n    var allowedTags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, Parser);\n\n    this.tags = {};\n\n    if (!allowedTags) {\n      this.tags = _tags2.default;\n    } else {\n      allowedTags.forEach(function (name) {\n        if (_tags2.default[name]) {\n          _this.tags[name] = _tags2.default[name];\n        }\n      });\n    }\n\n    this.renderer = new _renderer2.default();\n  }\n\n  _createClass(Parser, [{\n    key: 'registerTag',\n    value: function registerTag(name, tag) {\n      this.tags[name] = tag;\n    }\n  }, {\n    key: 'parseParams',\n    value: function parseParams(token) {\n      var params = [];\n\n      function addParam(name, value) {\n        if (name) {\n          var n = name.trim(); // ignore on* events attribute\n\n          if (n.length && n.toLowerCase().indexOf('on') !== 0) {\n            params.push([n, value]);\n          }\n        }\n      }\n\n      if (token) {\n        var key = [];\n        var target = key;\n        var value = [];\n        var terminate = ' ';\n        var skipNext = false;\n        Array.from(token).forEach(function (c) {\n          if (skipNext) {\n            skipNext = false;\n          } else if (target === key && c === '=') {\n            target = value;\n          } else if (target === key && c === ':') {\n            target = value;\n          } else if (!value.length && c === '\"') {\n            terminate = c;\n          } else if (c !== terminate) {\n            target.push(c);\n          } else {\n            addParam(key.join(''), value.join(''));\n\n            if (!_constants.SPACE_RE.test(terminate)) {\n              skipNext = true;\n            }\n\n            target = key = [];\n            value = [];\n            terminate = ' ';\n          }\n        });\n        addParam(key.join(''), value.join(''));\n      }\n\n      return params;\n    }\n  }, {\n    key: 'createTextNode',\n    value: function createTextNode(parent, text) {\n      var ref = parent.children.slice(-1)[0]; //console.log('ref', ref, text)\n\n      if (ref != null && ref.STRIP_OUTER) {\n        text = text.replace(_constants.START_NEWLINE_RE, '');\n      }\n\n      return new _tag2.default(this.renderer, {\n        text: text,\n        parent: parent\n      });\n    }\n  }, {\n    key: 'parse',\n    value: function parse(input) {\n      var root = new _tag2.default(this.renderer);\n      var tokens = input.split(_constants.TOKEN_RE);\n      var current = root;\n      var token = null;\n\n      while (tokens.length) {\n        token = tokens.shift();\n\n        if (!token.length) {\n          continue;\n        }\n\n        if (token.match(_constants.TOKEN_RE)) {\n          var params = this.parseParams(token.slice(1, -1));\n          var tagName = params[0][0].toLowerCase();\n\n          if (current.CLOSED_BY.indexOf(tagName) > -1) {\n            tokens.unshift(token);\n            tagName = '/' + current.name;\n            params = [];\n          }\n\n          if (tagName[0] === '/') {\n            tagName = tagName.slice(1);\n\n            if (!this.tags[tagName]) {\n              this.createTextNode(current, token);\n              continue;\n            }\n\n            if (current.name === tagName) {\n              current = current.parent;\n            }\n          } else {\n            var cls = this.tags[tagName];\n\n            if (!cls) {\n              this.createTextNode(current, token);\n              continue;\n            }\n\n            var tag = new cls(this.renderer, {\n              name: tagName,\n              parent: current,\n              params: params\n            });\n\n            if (!tag.SELF_CLOSE && (tag.CLOSED_BY.indexOf(tagName) < 0 || current.name !== tagName)) {\n              current = tag;\n            }\n          }\n        } else {\n          this.createTextNode(current, token);\n        }\n      }\n\n      return root;\n    }\n  }, {\n    key: 'toHTML',\n    value: function toHTML(input) {\n      return this.parse(input).toHTML();\n    }\n  }, {\n    key: 'toReact',\n    value: function toReact(input) {\n      return this.parse(input).toReact();\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports.default = Parser;","map":null,"metadata":{},"sourceType":"script"}
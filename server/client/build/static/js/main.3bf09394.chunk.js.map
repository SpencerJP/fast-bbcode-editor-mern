{"version":3,"sources":["components/tags/LineBreakTag.jsx","components/tags/CenterAlignmentTag.jsx","components/common/CustomLoader.jsx","redux/actions/discordApiActions.js","components/common/DiscordAuth.jsx","hooks/useWindowSize.js","redux/actions/messageActions.js","components/common/EditBox.jsx","container/MOTD.jsx","components/tags/CommentTag.jsx","App.jsx","serviceWorker.js","redux/reducers/discordReducer.js","redux/reducers/messageReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["LineBreakTag","this","getComponents","Tag","CenterAlignmentTag","CustomLoader","props","Segment","inverted","style","Dimmer","active","Loader","getDiscordUserObject","object","type","payload","Avatar","styled","Image","LoginLogoutButton","Button","DiscordLogo","img","TextAlignment","span","DiscordAuth","user","useSelector","state","discordReducer","discordUserObject","dispatch","useDispatch","useCookies","cookies","removeCookie","React","useEffect","a","dToken","discord_token","fetch","headers","Authorization","response","json","data","getDiscordUser","err","console","error","Grid","Column","minWidth","color","onClick","src","alt","width","textAlign","className","id","avatar","href","window","REACT_APP_URL","useWindowSize","isClient","getSize","innerWidth","undefined","height","innerHeight","useState","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","getMOTD","string","fetchMOTD","setLoadingStatusMotd","setLoadingStatusEditBox","text","boolean","StyledTextArea","Form","TextArea","EditBox","rawBBCode","messageReducer","motd","isLoading","loadingStatusEditBox","handleClick","e","preventDefault","body","method","JSON","stringify","defaultValue","onChange","value","marginTop","loading","StyledSegmentInner","heightString","DataScroll","div","ExternalDiv","MOTDScreen","loadingStatusMotd","rawBBCodeWithNewLines","replace","parser","toReact","Row","CommentTag","registerTag","App","Boolean","location","hostname","match","initialState","authorizedUsers","rootReducer","combineReducers","action","middleware","thunk","logger","promise","store","createStore","compose","applyMiddleware","ReactDOM","render","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bf09394.chunk.js","sourcesContent":["import React from \"react\"\nimport { Tag } from \"bbcode-to-react\"\n\nexport default class LineBreakTag extends Tag {\n\ttoReact() {\n\t\t// using this.getComponents() to get children components.\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{this.getComponents()}\n\t\t\t\t<br />\n\t\t\t</>\n\t\t)\n\t}\n}\n","import React from \"react\"\nimport { Tag } from \"bbcode-to-react\"\n\nexport default class CenterAlignmentTag extends Tag {\n\ttoReact() {\n\t\t// using this.getComponents() to get children components.\n\t\treturn <center>{this.getComponents()}</center>\n\t}\n}\n","import React from \"react\"\nimport { Segment, Dimmer, Loader } from \"semantic-ui-react\"\n\nexport default function CustomLoader(props) {\n\treturn (\n\t\t<Segment inverted style={props.style}>\n\t\t\t<Dimmer active>\n\t\t\t\t<Loader />\n\t\t\t</Dimmer>\n\t\t</Segment>\n\t)\n}\n","export function getDiscordUserObject(object) {\n\treturn {\n\t\ttype: \"GET_DISCORD_USER_OBJECT\",\n\t\tpayload: object,\n\t}\n}\n\nexport function deleteDiscordUserObject() {\n\treturn {\n\t\ttype: \"DELETE_DISCORD_USER_OBJECT\",\n\t\tpayload: null,\n\t}\n}\n","import React from \"react\"\nimport { Button, Image, Grid, Icon } from \"semantic-ui-react\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { useCookies } from \"react-cookie\"\nimport styled from \"styled-components\"\nimport {\n\tgetDiscordUserObject,\n\tdeleteDiscordUserObject,\n} from \"../../redux/actions/discordApiActions\"\n\nconst Avatar = styled(Image)`\n\t&&&&&& {\n\t\tborder-radius: 50%;\n\t\tmax-width: 40px;\n\t\theight: auto;\n\t\t// margin-left: 6em;\n\t}\n`\n\nconst LoginLogoutButton = styled(Button)`\n\t&&& {\n\t\tbackground-color: #7289da;\n\t\tcolor: #fff;\n\t\tmin-height: 40px;\n\t\tmin-width: 160px;\n\t}\n`\n\nconst DiscordLogo = styled.img`\n\tmax-width: 35px;\n\theight: auto;\n\tfloat: left;\n`\n\nconst TextAlignment = styled.span`\n\tfont-size: 16px;\n\tline-height: 2em;\n`\n\nexport default function DiscordAuth() {\n\tconst user = useSelector(state => state.discordReducer.discordUserObject)\n\tconst dispatch = useDispatch()\n\tconst [cookies, , removeCookie] = useCookies([\"discord_token\"])\n\n\tReact.useEffect(() => {\n\t\tasync function getDiscordUser() {\n\t\t\tlet dToken = cookies.discord_token\n\t\t\tif (dToken) {\n\t\t\t\tlet response = await fetch(\"https://discordapp.com/api/users/@me\", {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\tAuthorization: `Bearer ${dToken}`,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tlet data = await response.json()\n\t\t\t\tdispatch(getDiscordUserObject(data))\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tgetDiscordUser()\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t}, [cookies.discord_token, dispatch])\n\tif (user) {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Grid.Column style={{ minWidth: \"160px\" }}>\n\t\t\t\t\t<LoginLogoutButton\n\t\t\t\t\t\tcolor=\"blue\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tremoveCookie(\"discord_token\")\n\t\t\t\t\t\t\tdispatch(deleteDiscordUserObject())\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DiscordLogo\n\t\t\t\t\t\t\tsrc=\"https://discordapp.com/assets/1c8a54f25d101bdc607cec7228247a9a.svg\"\n\t\t\t\t\t\t\talt=\"discord icon\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextAlignment>Logout</TextAlignment>\n\t\t\t\t\t</LoginLogoutButton>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column width={2} style={{ textAlign: \"center\" }}>\n\t\t\t\t\t<Avatar\n\t\t\t\t\t\tclassName=\"discord-avatar\"\n\t\t\t\t\t\tid=\"avatar\"\n\t\t\t\t\t\tsrc={`http://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png`}\n\t\t\t\t\t/>\n\t\t\t\t</Grid.Column>\n\t\t\t</>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<LoginLogoutButton\n\t\t\t\tcolor=\"blue\"\n\t\t\t\thref={window.REACT_APP_URL + \"/api/discord/login/\"}\n\t\t\t>\n\t\t\t\t<DiscordLogo\n\t\t\t\t\tsrc=\"https://discordapp.com/assets/1c8a54f25d101bdc607cec7228247a9a.svg\"\n\t\t\t\t\talt=\"discord icon\"\n\t\t\t\t/>\n\t\t\t\t<TextAlignment>Login</TextAlignment>\n\t\t\t</LoginLogoutButton>\n\t\t)\n\t}\n}\n","import { useState, useEffect } from \"react\"\n\n// Hook\nexport function useWindowSize() {\n\tconst isClient = typeof window === \"object\"\n\n\tfunction getSize() {\n\t\treturn {\n\t\t\twidth: isClient ? window.innerWidth : undefined,\n\t\t\theight: isClient ? window.innerHeight : undefined,\n\t\t}\n\t}\n\n\tconst [windowSize, setWindowSize] = useState(getSize)\n\n\tuseEffect(() => {\n\t\tif (!isClient) {\n\t\t\treturn false\n\t\t}\n\n\t\tfunction handleResize() {\n\t\t\tsetWindowSize(getSize())\n\t\t}\n\n\t\twindow.addEventListener(\"resize\", handleResize)\n\t\treturn () => window.removeEventListener(\"resize\", handleResize)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []) // Empty array ensures that effect is only run on mount and unmount\n\n\treturn windowSize\n}\n","export function getMOTD(string) {\n\treturn {\n\t\ttype: \"GET_MOTD\",\n\t\tpayload: string,\n\t}\n}\n\nexport function fetchMOTD() {\n\treturn async function(dispatch) {\n\t\tdispatch(setLoadingStatusMotd(true))\n\t\tdispatch(setLoadingStatusEditBox(true))\n\t\tlet response = await fetch(\"/rules\")\n\n\t\tlet data = await response.text()\n\t\tdispatch(getMOTD(data))\n\t\tdispatch(setLoadingStatusMotd(false))\n\t\tdispatch(setLoadingStatusEditBox(false))\n\t}\n}\n\nexport function setLoadingStatusMotd(boolean) {\n\treturn {\n\t\ttype: \"MOTD_SET_LOADING_STATUS\",\n\t\tpayload: boolean,\n\t}\n}\n\nexport function setLoadingStatusEditBox(boolean) {\n\treturn {\n\t\ttype: \"EDITBOX_SET_LOADING_STATUS\",\n\t\tpayload: boolean,\n\t}\n}\n","import React from \"react\"\nimport { Segment, Button, Form } from \"semantic-ui-react\"\nimport { useWindowSize } from \"../../hooks/useWindowSize\"\nimport styled from \"styled-components\"\nimport { useCookies } from \"react-cookie\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n\tgetMOTD,\n\tfetchMOTD,\n\tsetLoadingStatusEditBox,\n} from \"../../redux/actions/messageActions\"\n\nconst StyledTextArea = styled(Form.TextArea)`\n\tfont-family: Tahoma, Verdana, Segoe, sans-serif;\n\tfont-size: 16px;\n\tfont-style: normal;\n\tfont-variant: normal;\n\tfont-weight: 700;\n\tline-height: 26.4px;\n`\n\nexport default function EditBox(props) {\n\tconst { height } = useWindowSize()\n\tconst rawBBCode = useSelector(state => state.messageReducer.motd)\n\tconst isLoading = useSelector(\n\t\tstate => state.messageReducer.loadingStatusEditBox\n\t)\n\tconst [cookies] = useCookies([\"discord_token\"])\n\tconst dispatch = useDispatch()\n\tconst onChange = (e, { value }) => {\n\t\te.preventDefault()\n\t\tdispatch(getMOTD(value))\n\t}\n\n\tconst handleClick = async e => {\n\t\te.preventDefault()\n\t\tdispatch(setLoadingStatusEditBox(true))\n\t\tconst body = {\n\t\t\tdata: rawBBCode\n\t\t}\n\t\tawait fetch(\"/edit\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(body),\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: `Bearer ${cookies.discord_token}`,\n\t\t\t},\n\t\t})\n\t\tawait dispatch(fetchMOTD())\n\t\tdispatch(setLoadingStatusEditBox(false))\n\t}\n\n\treturn (\n\t\t<Segment>\n\t\t\t<Form>\n\t\t\t\t<StyledTextArea\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tdefaultValue={rawBBCode}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tstyle={{ height: `${height - 100}px` }}\n\t\t\t\t/>\n\t\t\t</Form>\n\t\t\t<Button\n\t\t\t\tonClick={handleClick}\n\t\t\t\tcolor=\"blue\"\n\t\t\t\tstyle={{ marginTop: \"3px\" }}\n\t\t\t\tloading={isLoading}\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</Button>\n\t\t</Segment>\n\t)\n}\n","import React from \"react\"\nimport CustomLoader from \"../components/common/CustomLoader\"\nimport { Segment, Grid } from \"semantic-ui-react\"\nimport DiscordAuth from \"../components/common/DiscordAuth\"\nimport styled from \"styled-components\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport EditBox from \"../components/common/EditBox\"\nimport { useWindowSize } from \"../hooks/useWindowSize\"\nimport { fetchMOTD } from \"../redux/actions/messageActions\"\n\nconst StyledSegmentInner = styled(Segment)`\n\t&&& {\n\t\tpadding: 40px;\n\t\tbackground-color: #222;\n\t\tborder-radius: 13px;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n\t\t// ${props => props.heightString}\n\t}\n`\n\nconst DataScroll = styled.div`\n\t&&& {\n\t\tpadding: 20px;\n\t\tbackground-color: #222;\n\t\t${props => props.heightString}\n\t\toverflow-y: scroll;\n\t}\n`\n\nconst ExternalDiv = styled.div`\n\tbackground-color: #5c4949;\n\tpadding: 20px;\n\tborder-radius: 20px;\n`\n\nexport default function MOTDScreen(props) {\n\tconst { height } = useWindowSize()\n\tconst rawBBCode = useSelector(state => state.messageReducer.motd)\n\tconst isLoading = useSelector(state => state.messageReducer.loadingStatusMotd)\n\tconst user = useSelector(state => state.discordReducer.discordUserObject)\n\tconst dispatch = useDispatch()\n\n\tlet rawBBCodeWithNewLines = rawBBCode\n\tif (rawBBCode) {\n\t\trawBBCodeWithNewLines = rawBBCodeWithNewLines.replace(/\\n/g, \"[br][/br]\")\n\t}\n\n\tReact.useEffect(() => {\n\t\ttry {\n\t\t\tdispatch(fetchMOTD())\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t}, [dispatch, props.parser])\n\n\tif (\n\t\tuser &&\n\t\t(user.id === \"290097917388128258\" || user.id === \"150623388036104192\")\n\t) {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ExternalDiv>\n\t\t\t\t\t<Grid>\n\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t<Grid.Column width={10}>\n\t\t\t\t\t\t\t\t<StyledSegmentInner user={user}>\n\t\t\t\t\t\t\t\t\t{!isLoading ? (\n\t\t\t\t\t\t\t\t\t\t<DataScroll heightString={`height: ${height - 113}px;`}>\n\t\t\t\t\t\t\t\t\t\t\t{props.parser.toReact(rawBBCodeWithNewLines)}\n\t\t\t\t\t\t\t\t\t\t</DataScroll>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<CustomLoader style={{ height: `${height - 100}px` }} />\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</StyledSegmentInner>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t<Grid.Column width={6}>\n\t\t\t\t\t\t\t\t<EditBox />\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t<DiscordAuth />\n\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t</Grid>\n\t\t\t\t</ExternalDiv>\n\t\t\t</div>\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ExternalDiv>\n\t\t\t\t\t<StyledSegmentInner user={user}>\n\t\t\t\t\t\t{!isLoading ? (\n\t\t\t\t\t\t\tprops.parser.toReact(rawBBCodeWithNewLines)\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<CustomLoader style={{ height: \"1000px\" }} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</StyledSegmentInner>\n\t\t\t\t\t<DiscordAuth />\n\t\t\t\t</ExternalDiv>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from \"react\"\nimport { Tag } from \"bbcode-to-react\"\n\nexport default class CommentTag extends Tag {\n    toReact() {\n        // using this.getComponents() to get children components.\n        return <></>\n    }\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport LineBreakTag from \"./components/tags/LineBreakTag\"\nimport CenterAlignmentTag from \"./components/tags/CenterAlignmentTag\"\nimport parser from \"bbcode-to-react\"\nimport MOTD from \"./container/MOTD\"\nimport CommentTag from \"./components/tags/CommentTag\"\n\nparser.registerTag(\"br\", LineBreakTag) // new line tag\nparser.registerTag(\"cent\", CenterAlignmentTag) // new line tag\nparser.registerTag(\"comment\", CommentTag) // new line tag\n\nfunction App() {\n\treturn <MOTD parser={parser} />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n\tdiscordUserObject: null,\n\tauthorizedUsers: [],\n}\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase \"GET_DISCORD_USER_OBJECT\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdiscordUserObject: action.payload,\n\t\t\t}\n\t\tcase \"DELETE_DISCORD_USER_OBJECT\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdiscordUserObject: null,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","const initialState = {\n\tmotd: null,\n\tloadingStatusMotd: true,\n\tloadingStatusEditBox: true,\n}\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase \"GET_MOTD\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmotd: action.payload,\n\t\t\t}\n\t\tcase \"MOTD_SET_LOADING_STATUS\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloadingStatusMotd: action.payload,\n\t\t\t}\n\t\tcase \"EDITBOX_SET_LOADING_STATUS\":\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloadingStatusEditBox: action.payload,\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","//This is our root reducer that we will input into our store\n\n//Here we will combine all our reducers\nimport { combineReducers } from \"redux\"\nimport discordReducer from \"./discordReducer\"\nimport messageReducer from \"./messageReducer\"\n\nconst rootReducer = combineReducers({\n\tdiscordReducer: discordReducer,\n\tmessageReducer: messageReducer,\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport logger from \"redux-logger\"\nimport promise from \"redux-promise-middleware\"\nimport rootReducer from \"./reducers\"\n\nconst initialState = {}\n\nconst middleware = [thunk, logger, promise]\n\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)))\n\nexport default store\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App.jsx\"\nimport { Provider } from \"react-redux\"\nimport { CookiesProvider } from \"react-cookie\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport store from \"./redux/store\"\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<CookiesProvider>\n\t\t\t<App />\n\t\t</CookiesProvider>\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}